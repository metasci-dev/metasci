"""Atomic Weight Library Interface"""

#Standard packages

#My packages
import isoname
from ..data import data
from . import __path__

#Note that since ground state and meta-stable isotopes are of the same atomic weight, 
#the meta-stables have been discluded from the following data sets.

def MakeLib():
    """Makes the atomic weight library.
    Library rows have the the following form:

    iso	AW	AW_sig	Abund
        iso	= Isotope in LLZZZM format
        AW	= Atomic Weight [amu]
        AW_sig	= Atomic Weight Uncertainty [amu]
        Abund	= Natural fractional atomic abundance [unitless]
    Not to be used under normal circumstances.
    More like an embedded script, in case the librrary file is lost and unrecoverable."""

    import urllib2

    isolist = []
    
    for key in isoname.LLaadic.keys():
        NucFetched = False

        while not NucFetched:
            try:
                print key 
                kaeri = urllib2.urlopen( 'http://atom.kaeri.re.kr/cgi-bin/nuclide?nuc=%s'%(key) )
                NucFetched = True
            except:
                print "Failed to grab, retrying",

        for line in kaeri:
            if 0 < line.count("/cgi-bin/nuclide?nuc="):
                nuc = line.partition("/cgi-bin/nuclide?nuc=")[2].partition("\"")[0].upper()
                if not (nuc == key):
                    isolist.append(nuc)
        kaeri.close()

    print "\n~~~~~~~~\n"

    isotab = []

    for key in isolist:
        AW = 0.0
        AW_sig = 0.0
        Abund = 0.0			

        NucFetched = False

        while not NucFetched:
            try:
                print key
                kaeri = urllib2.urlopen( 'http://atom.kaeri.re.kr/cgi-bin/nuclide?nuc=%s'%(key) )
                NucFetched = True
            except:
                print "Failed to grab, retrying",

        for line in kaeri:
            if 0 < line.count("Atomic Mass:"):
                ls = line.split()
                AW = ls[2]
                AW_sig = ls[4]
            elif 0 < line.count("Atomic Percent Abundance:"):
                ls = line.split()
                abund_try = ls[-1]
                while Abund == 0.0:
                    try:
                        Abund = float(abund_try) / 100.0
                    except:
                        abund_try = abund_try[:-1]
        kaeri.close()

        if AW == 0.0:
            continue

        isotab.append([isoname.LLZZZM_2_aazzzm( key ), AW, AW_sig, '%G'%Abund])


    isotab = sorted(isotab)

    libfile = open('AtomicWeight.LIB', 'w')
    for row in isotab:
        libfile.write( '%s\t%s\t%s\t%s\n'%(isoname.aazzzm_2_LLZZZM(row[0]), row[1], row[2], row[3] )  )
    libfile.close()

    return

AtomicWeight = {}	#Atomic Weights of Isotopes
ElementWeight = {} 	#Weight of Naturally Occuring Elements
for key in isoname.LLaadic.keys():
    ElementWeight[key] = data(0.0, 0.0)

lib = open(__path__[0] + '/AtomicWeight.LIB', 'r')
for line in lib:
    ls = line.split()
    iso = isoname.LLZZZM_2_aazzzm(ls[0])
    AtomicWeight[ iso ] = data(ls[1], ls[2])

    frac_abund = float(ls[3]) 
    if 0.0 < frac_abund:
        element = isoname.aaLLdic[ iso[:2] ]
        ElementWeight[element] = ElementWeight[element] + (frac_abund * AtomicWeight[ iso ])
lib.close()
